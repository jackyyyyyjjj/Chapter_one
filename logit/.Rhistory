library(openxlsx)
}
#Extract this Rmd file's working directory
if (!'rstudioapi' %in% rownames(installed.packages())) {
install.packages('rstudioapi')
}else{
library(rstudioapi)
}
#Export the regression result to latex format tables
if (!'stargazer' %in% rownames(installed.packages())) {
install.packages('stargazer')
}else{
library(stargazer)
}
#Connect to pyblp python package
if (!'reticulate' %in% rownames(installed.packages())) {
install.packages('reticulate')
}else{
library(reticulate)
}
#Visulaize the missing values in the dataframe
if (!'VIM' %in% rownames(installed.packages())) {
install.packages('VIM')
}else{
library(VIM)
}
#  A Grammar of Data Manipulation
if (!'dplyr' %in% rownames(installed.packages())) {
install.packages('dplyr')
}else{
library(dplyr)
}
#Fast and User-Friendly Fixed-Effects Estimations
if (!'fixest' %in% rownames(installed.packages())) {
install.packages('fixest')
}else{
library(fixest)
}
#'
#' # Set the working directory
## ----analysis,include=TRUE----------------------------------------------------------------
script_path <- rstudioapi::getActiveDocumentContext()$path
hash = "(.*)/"
setwd(str_extract(script_path, hash))
#'
## -----------------------------------------------------------------------------------------
data1 <- readRDS('../data_extract/Rds_data/complete_data2.Rds')
data1 <- data1[,-c(5,8)]
prochar <- read.csv('./data/raw_char.csv')#Product characteristics data
#select the suction,battery life,package dimension,item-weight
# Check the NA,NAN and NULL value, due to limitation of collecting from Amazon
prochar1 <- prochar[!is.na(prochar$Wok_1charge),]
prochar2 <- prochar1[!is.na(prochar1$suction),]
prochar2 <- prochar2[!is.na(prochar2$ProDim),]
prochar2 <- prochar2[!is.na(prochar2$Item_Weight),]
#'
## -----------------------------------------------------------------------------------------
data1 <- readRDS('../data_extract/Rds_data/complete_data2.Rds')
#'
## -----------------------------------------------------------------------------------------
data1 <- readRDS('../data_extract/Rds_data/complete_data2.Rds')
#'
#' # Set the working directory
## ----analysis,include=TRUE----------------------------------------------------------------
script_path <- rstudioapi::getActiveDocumentContext()$path
hash = "(.*)/"
setwd(str_extract(script_path, hash))
if ('stringr' %in% rownames(installed.packages())==FALSE) {
install.packages('stringr')
}else{
library(openxlsx)
}
#'
#'
#'
## ----include=TRUE-------------------------------------------------------------------------
# Check  whether the packages called below require installation.
rm (list = ls(all=TRUE))#Clearn objects from the workspace
graphics.off() #Close the graphics
#Simple, Consistent Wrappers for Common String Operations
if ('stringr' %in% rownames(installed.packages())==FALSE) {
install.packages('stringr')
}else{
library(stringr)
}
if ('openxlsx' %in% rownames(installed.packages())==FALSE) {
install.packages('openxlsx')
}else{
library(openxlsx)
}
#Extract this Rmd file's working directory
if (!'rstudioapi' %in% rownames(installed.packages())) {
install.packages('rstudioapi')
}else{
library(rstudioapi)
}
# library(xlsx)
library(openxlsx)
#'
#'
#'
## ----include=TRUE-------------------------------------------------------------------------
# Check  whether the packages called below require installation.
rm (list = ls(all=TRUE))#Clearn objects from the workspace
graphics.off() #Close the graphics
#Simple, Consistent Wrappers for Common String Operations
if ('stringr' %in% rownames(installed.packages())==FALSE) {
install.packages('stringr')
}else{
library(stringr)
}
# library(xlsx)
library(openxlsx)
#Simple, Consistent Wrappers for Common String Operations
if ('stringr' %in% rownames(installed.packages())==FALSE) {
install.packages('stringr')
}else{
library(stringr)
}
i
#Extract this Rmd file's working directory
if (!'rstudioapi' %in% rownames(installed.packages())) {
install.packages('rstudioapi')
}else{
library(rstudioapi)
}
debugSource("C:/Users/hpe21bnu/OneDrive - University of East Anglia/Documents/UEA_PHD/Chapter1/code/Robot_vcuum_data/Merger_simulation/keepa_data/Expansion_version/analysis/ces/CES_P_increasing.R")
#'
#'
#'
## ----include=TRUE-------------------------------------------------------------------------
# Check  whether the packages called below require installation.
rm (list = ls(all=TRUE))#Clearn objects from the workspace
graphics.off() #Close the graphics
#Simple, Consistent Wrappers for Common String Operations
if ('stringr' %in% rownames(installed.packages())==FALSE) {
install.packages('stringr')
}else{
library(stringr)
}
if ('openxlsx' %in% rownames(installed.packages())==FALSE) {
install.packages('openxlsx')
}else{
library(openxlsx)
}
#' ---
#' title: "Merger simulation"
#' author: "Junjun Zhang"
#' date: "2022/5/9"
#' output:
#'   html_document: default
#'   pdf_document: default
#' ---
#'
#'
#'
## ----include=TRUE-------------------------------------------------------------------------
# Check  whether the packages called below require installation.
rm (list = ls(all=TRUE))#Clean objects from the workspace
graphics.off() #Close the graphics
#Simple, Consistent Wrappers for Common String Operations
if ('stringr' %in% rownames(installed.packages())==FALSE) {
install.packages('stringr')
}else{
library(stringr)
}
# library(xlsx)
if ('openxlsx' %in% rownames(installed.packages())==FALSE) {
install.packages('openxlsx')
}else{
library(openxlsx)
}
#Extract this Rmd file's working directory
if (!'rstudioapi' %in% rownames(installed.packages())) {
install.packages('rstudioapi')
}else{
library(rstudioapi)
}
#linearHypothesis
if (!'car' %in% rownames(installed.packages())) {
install.packages('car')
}else{
library(car)
}
#Export the regression result to latex format tables
if (!'stargazer' %in% rownames(installed.packages())) {
install.packages('stargazer')
}else{
library(stargazer)
}
#Connect to pyblp python package
if (!'reticulate' %in% rownames(installed.packages())) {
install.packages('reticulate')
}else{
library(reticulate)
}
#Visulaize the missing values in the dataframe
if (!'VIM' %in% rownames(installed.packages())) {
install.packages('VIM')
}else{
library(VIM)
}
#  A Grammar of Data Manipulation
if (!'dplyr' %in% rownames(installed.packages())) {
install.packages('dplyr')
}else{
library(dplyr)
}
#Fast and User-Friendly Fixed-Effects Estimations
if (!'fixest' %in% rownames(installed.packages())) {
install.packages('fixest')
}else{
library(fixest)
}
library("ivreg")
if ('DBI' %in% rownames(installed.packages())==FALSE) {
install.packages('DBI')
}else{
library(DBI)
}
gc(T)
#'
#' # Set the working directory
## ----analysis,include=TRUE----------------------------------------------------------------
script_path <- rstudioapi::getActiveDocumentContext()$path
hash = "(.*)/"
setwd(str_extract(script_path, hash))
# START -------------------------------------------------------------------
# Outdata <- kk[kk$review_country!="the United States",]
# selec <- Outdata %>%
#   group_by(review_country) %>%
#   mutate(numPro = length(unique(asin))) %>%
#   ungroup()
# outusa_data <- readRDS('../data/outusa_data.Rds') other countries data
# price_sales_rating_quarter <- readRDS('../data/price_sales_rating_quarter.Rds')
# data1 <- read.csv('product.dea3_NO_EMSUCTION4.csv')
# data2 <- data1[,-c(1:2,10:18)]
# data3 <- data2[,-c(3:4)]
# Full_data <- merge(price_sales_rating_quarter,data3,by='asin',all.x = T)
#
#
#
#
#
# # Missing value check -----------------------------------------------------
# # use aggr to visualize the missing value
# library('VIM')
# aggr(Full_data[,c(7:8,10,13,14)],prop=FALSE,numbers=TRUE)
#
#
#
# # combine with the estimated sales data -----------------------------------
# Full_data2 <- Full_data[!(is.na(Full_data$sales)|is.na(Full_data$prices)|is.na(Full_data$ave_rating)),]
# Full_data2$COM <- paste(Full_data2$asin,Full_data2$market_ids,sep = '')
#
#
# conn <- dbConnect(RSQLite::SQLite(), "../SALES/amazon_sales.sqlite")
# amazon_sales <- dbGetQuery(conn, "SELECT asin,market_ids,sales from estsales")
#
# library(stringr)
#
# dbDisconnect(conn)
# amazon_sales$COM <- paste(amazon_sales$asin,amazon_sales$market_ids,sep = '')
#
#
# Full_data3 <- merge(Full_data2,amazon_sales,by='COM',all.x = T)
#
# write.csv(Full_data3,'Full_data3.csv')
Full_data3 <- read.csv('Full_data3.csv')
#the more product characteristics
data.m <- readRDS('data2.Rds')
data.m1 <- data.m %>% distinct(asin,.keep_all =TRUE)
Full_data_m <- Full_data3[Full_data3$asin %in% data.m1$asin,]
Full_data3 <- Full_data3[Full_data3$Brand %in% Full_data_m$Brand,]
#pick only length or width here widtu
Full_data3 <- merge(Full_data3,data.m1[,c(1,11:13)],by='asin',all.x = T)
# write.csv(Full_data3,'Full_data3.csv')
Full_data3 <- read.csv('Full_PROC.csv')
Full_data3$year <- str_extract(Full_data3$listed_date,'\\d{4}')
Full_data3$year <- as.numeric(Full_data3$year)
Full_data3$pro_age <- 2022-as.numeric(Full_data3$year)
# stargazer(Full_data3)
#Histogram
# hist(Full_data3$prices,  xlab = "prices",  main = "Histogram of prices",  breaks = sqrt(nrow(Full_data3))) # set number of bins
# hist(Full_data3$ave_rating,  xlab = "Average rating",  main = "Histogram of average rating",  breaks = sqrt(nrow(Full_data3))) # set number of bins
# hist(Full_data3$sales,  xlab = "Sales",  main = "Histogram of sales",  breaks = sqrt(nrow(Full_data3))) # set number of bins
# hist(Full_data3$suction,  xlab = "suction",  main = "Histogram of suction",  breaks = sqrt(nrow(Full_data3))) # set number of bins
# hist(Full_data3$Wok_1charge,  xlab = "Battery life",  main = "Histogram of battery life",  breaks = sqrt(nrow(Full_data3))) # set number of bins
# hist(Full_data3$pro_age,  xlab = "Product age",  main = "Histogram of product age",  breaks = sqrt(nrow(Full_data3))) # set number of bins
# library(ggplot2)
# ggplot(dat) +  aes(x = hwy) +  geom_histogram(bins = 30L, fill = "#0c4c8a") +  theme_minimal()
#clean the missing value
# outusa_data <- readRDS('../data/outusa_data.Rds')
# price_sales_rating_quarter <- readRDS('../data/price_sales_rating_quarter.Rds')
# data1 <- read.csv('product.dea3_NO_EMSUCTION4.csv')
# data2 <- data1[,-c(1:2,10:18)]
# nonmissing_price_sales <- price_sales_rating_quarter[price_sales_rating_quarter$sales,]
# nonmissing_price_sales <- price_sales_rating_quarter[!(is.na(price_sales_rating_quarter$sales)|is.na(price_sales_rating_quarter$prices)|is.na(price_sales_rating_quarter$ave_rating)),]
# nonmissing_price_sales <- nonmissing_price_sales[!(is.infinite(nonmissing_price_sales$sales)|is.infinite(nonmissing_price_sales$prices)),]
#
# #put the estimated sales data with the nonmissing
# nonmissing_price_sales$combine <- paste(nonmissing_price_sales$asin,nonmissing_price_sales$market_ids,sep = '')
# data3 <- data2[,-c(3:4)]
# Full_data <- merge(nonmissing_price_sales,data3,by='asin',all.x = T)
# outusa_data$combine <- paste(outusa_data$asin,outusa_data$market_ids,sep = '')
# outusa_data <- outusa_data[,-c(1,4)]
#
# Full_data2 <- merge(Full_data,outusa_data,by='combine',all.x = T)
# data2$prices <- log(data2$prices)
# write.csv(data2,'rawdata.csv')
# Outliers analysis -------------------------------------------------------
#In addition to histograms, boxplots are also useful to detect potential outliers.
boxplot(Full_data3$prices,  ylab = "prices",
main = "Boxplot of prices")
boxplot.stats(Full_data3$prices)$out #outliers
a<-which(Full_data3$prices %in% boxplot.stats(Full_data3$prices)$out)
Full_data4 <- Full_data3[-c(a),]
boxplot(Full_data4$ave_rating,  ylab = "Average rating",
main = "Boxplot of Average rating")
boxplot.stats(Full_data4$ave_rating)$out #outliers
a<-which(Full_data4$ave_rating %in% boxplot.stats(Full_data4$ave_rating)$out)
Full_data4 <- Full_data4[-c(a),]
boxplot(Full_data4$suction,  ylab = "suction",
main = "Boxplot of suction")
boxplot.stats(Full_data4$suction)$out #outliers
a<-which(Full_data4$suction %in% boxplot.stats(Full_data4$suction)$out)
Full_data4 <- Full_data4[-c(a),]
boxplot(Full_data4$Wok_1charge,  ylab = "Battery life",
main = "Boxplot of battery life")
boxplot.stats(Full_data4$Wok_1charge)$out #outliers
a<-which(Full_data4$Wok_1charge %in% boxplot.stats(Full_data4$Wok_1charge)$out)
Full_data4 <- Full_data4[-c(a),]
boxplot(Full_data4$sales,  ylab = "Sales",
main = "Boxplot of sales")
boxplot.stats(Full_data4$sales)$out #outliers
a<-which(Full_data4$sales %in% boxplot.stats(Full_data4$sales)$out)
Full_data4 <- Full_data4[-c(a),]
boxplot(Full_data4$pro_age,  ylab = "PROAGE",
main = "Boxplot of product age")
boxplot.stats(Full_data4$pro_age)$out #outliers
a<-which(Full_data4$pro_age %in% boxplot.stats(Full_data4$pro_age)$out)
Full_data4 <- Full_data4[-c(a),]
Full_data3 <- Full_data4
# stargazer(Full_data3[,c(7,8,11:13,15)])
# Correlation test --------------------------------------------------------
library(ggcorrplot)
library(ggplot2)
# corrdata <- Full_data3[,c(7,8,11,12,13,15)]
# cormtvacuum <- round(cor(corrdata), 3)
# ggcorrplot(cormtvacuum,method = "circle",lab=T)
#check how many products in each market
promar <- as.data.frame(table(Full_data3$market_ids))
stargazer(promar,summary = F,type = 'text')
usahousehold_number <- read.xlsx('../data/usahousehold_number.xlsx',sheet = 'quar')
# data1 <- data1[!(data1$market_ids=='R16Q3'|data1$market_ids=='R16Q4'|data1$market_ids=='R17Q1'|
#                   data1$market_ids=='R17Q2'|data1$market_ids=='R17Q3'|data1$market_ids=='R17Q4'),]
Full_data4 <- merge(Full_data3,usahousehold_number,by='market_ids',all.x = T)
#
#
# data2 <- data2[!(data2$market_ids=='2016-07'|data2$market_ids=='2016-08'|data2$market_ids=='2016-10'|
#                  data2$market_ids=='2016-11'|data2$market_ids=='2016-12'|data2$market_ids=='2017-01'|
#                  data2$market_ids=='2017-02'|data2$market_ids=='2017-03'|data2$market_ids=='2017-04'),]
PROCESS <- Full_data4 %>%
group_by(market_ids,Firm,Brand) %>%
summarise(Averate = mean(ave_rating),
Prices = mean(prices),
sales = sum(sales),
itemWidth = mean(itemWidth),
itemHeight = mean(itemHeight),
itemWeight = mean(itemWeight),
NO.brand = n(),
Wok_1charge = mean(Wok_1charge),
suction = mean(suction),
pro_age = max(pro_age),
# num.pro = ifelse(n()>1,1,0),
Fra_income = mean(Fra_income)
) %>%
ungroup()
# JUST DELETE THE ZERO SHARES WHICH i NEED TO IMPROVE IN THE FUTURE
# data2 <- data2[!data2$rating==0,]
Full_data5 <- as.data.frame(PROCESS)
#summary result
# stargazer(Full_data5)
#
# stargazer(data2,summary = TRUE,digits=2)
owner <- function(thisOwner){
owners <- as.numeric(factor(thisOwner, levels= unique(thisOwner)))
nprod <- length(thisOwner)
thisOwner <- matrix(0,ncol=nprod,nrow=nprod)
for( o in unique(owners)){
thisOwner [owners == o, owners == o] = 1
}
return(thisOwner)
}
# Form the id for charcter value function
.indexing.markets <- function( cdidOld ) {
cdidOld <- as.character(cdidOld)
unique.ids <-  unique(cdidOld)
nmkt <- length(unique.ids)
cdid <- numeric(length(cdidOld))
for(i in 1:nmkt ){
relevantMarkets <- cdidOld == unique.ids[i]
cdid[ relevantMarkets ] <- i
}
return( cdid )
}
Full_data5$firm_ids <- .indexing.markets(Full_data5$Firm)
Full_data5$product_ids <- .indexing.markets(Full_data5$Brand)
#### Blp type iv
constructIV <- function(firmid, cdid, id, X) {
n <- dim(X)[1]
p <- dim(X)[2]
names <- colnames(X)
if (is.null(names)) names <- paste("V", 1:p, sep="")
sum.other <-  matrix(NA, nrow = n, ncol = p)
colnames(sum.other) <- paste("sum.o.", names, sep="")  # sum other
sum.rival <-  matrix(NA, nrow = n, ncol = p)
colnames(sum.rival) <- paste("sum.r.", names, sep="")  # sum rival
for (i in 1:n) {
for (j in 1:p) {
other_ind=(firmid==firmid[i] & cdid==cdid[i] & id!=id[i])
rival_ind=(firmid!=firmid[i] & cdid==cdid[i])
sum.other[i,j]=sum(X[other_ind==1,j])
sum.rival[i,j]=sum(X[rival_ind==1,j])
}
}
return(cbind(sum.other, sum.rival))
}
##work1charge,suction,item-weight,product dimension IV
blp_iv <- constructIV(Full_data5[,15],Full_data5[,1],Full_data5[,16],Full_data5[,c(7:13)])
##work1charge,suction,PRO AGE,RATINGS IV
# blp_iv <- constructIV(data2[,16],data2[,1],data2[,17],data2[,c(3:4,9,15)])
Full_data6 <- cbind(Full_data5,blp_iv)
datatest <- Full_data6
# Now use usa data to represent the potential market data -----------------
sharesout <- datatest %>%
group_by(market_ids) %>%
summarise(s0=sum(sales,na.rm = T)) %>%
ungroup()
# shares <- datatest %>%
#   group_by(market_ids) %>%
#   summarise(shares=sum(rating,na.rm = T)) %>%
#   ungroup()
datatest2 <- merge(datatest,sharesout,by='market_ids',all.x = T)
datatest2$shares <- datatest2$sales/datatest2$Fra_income
datatest2$shares0 <- 1-datatest2$s0/datatest2$Fra_income
datatest2$lgs.s0 <- log(datatest2$shares)-log(datatest2$shares0) ## Do I need to line up the same form as the estimation form, what is the quatity  and income in my model.
# check whether the quality is endogenous ---------------------------------
#Durbin-Wu-Hausman test to check the endogenous variable
####  Firm id dummy and Market id dummy
dummycol <- data.frame(datatest2$product_ids)
colnames(dummycol) <- c("product")
library(fastDummies)
test.df <- dummy_cols(dummycol, select_columns = "product", remove_first_dummy = T)
test.df <- test.df[,-1]
datatest3 <- cbind(datatest2, test.df)
#quarter fixed effect
dummycol_time <- data.frame(datatest3$market_ids)
colnames(dummycol_time) <- c("quarYear")
library(fastDummies)
test.df_time <- dummy_cols(dummycol_time, select_columns = "quarYear", remove_first_dummy = T)
test.df_time1 <- test.df_time[,-1]
datatest4 <- cbind(datatest3, test.df_time1)
names <- tibble(test.df,test.df_time1)
name <- colnames(names)
# ols
# m_ols <- lm(shares ~ .,data =datatest4[,-c(1:2,5,8,9,11,12)])
##Only keep sum.o.suction, sum.o.Wok_1charge and sum.o.pro_age
# test <- datatest4[,-c(1:6,9,14:17,19,21,23,24,39:41)]
# test <- datatest4[,-c(1:3,6,11:13,20:22)] #with num.pro
test <- datatest4[,-c(1:3,6,14:16,31:33)] #with num.pro
# I will consider the rating as the IV ------------------------------------
# cormtvacuum2 <- round(cor(test[,-c(14:500)]), 3)
# ggcorrplot(cormtvacuum2,method = "circle",lab=T)
ck <- datatest4[,c(4:13)]
stargazer(ck,digits = 2)
# test <- datatest4[,-c(1:2,5,6,10:13,14,16:17,26:28)]
#delete sum.o.Wok_1chargesum.r.Wok_1charge,sum.r.suction 12******     take this one*******
# test <- datatest4[,-c(1:2,5,8,9,10:11,13:14)]
# m_iv_put <- ivreg(shares ~ .-sum.o.suction   -sum.o.pro_age -sum.r.pro_age  |  .-prices -ave_rating, data = test[,-c(7,9:10)])
# stargazer(m_iv_put,omit =name,type = 'text')
# summary(m_iv_put,test = TRUE)
#
# stage1_price <- lm(prices~ .-shares -ave_rating,data =test[,-c(7,9:10)])
# # summary(stage1_price)
#
# stage1_quality <- lm(ave_rating~ .-prices -shares,data = test[,-c(7,9:10)])
# # summary(stage1_quality)
# # names <- tibble(test.df,test.df_time1)
# # name <- colnames(names)
# stargazer(stage1_price,stage1_quality,omit =name,type = 'text')
# k <- feols(lgs.s0 ~ Wok_1charge + suction + pro_age|product_ids + market_ids|Averate + Prices ~sum.o.pro_age+sum.r.Wok_1charge+sum.r.pro_age ,datatest4)
# etable(k)
# k <- feols(lgs.s0 ~  itemHeight + itemWeight+num.pro+ Wok_1charge +suction +pro_age|product_ids + market_ids|Averate + Prices ~sum.o.itemWeight+sum.o.suction+sum.o.pro_age,datatest4)
# etable(k)
# k <- feols(lgs.s0 ~ itemWidth  + itemWeight+ Wok_1charge +suction +pro_age|product_ids + market_ids|Averate + Prices ~sum.o.itemWeight+sum.o.suction+sum.o.pro_age,datatest4)
# etable(k)
# k <- feols(lgs.s0 ~ itemWidth + itemHeight + itemWeight+num.pro+ Wok_1charge +suction |product_ids + market_ids|Averate + Prices ~sum.o.itemWeight+sum.o.suction+sum.o.pro_age,datatest4)
# etable(k)
#here find pro_age is a problem
# three iv ----------------------------------------------------------------
set.seed(100)
x <- 10:23
# combn(x,3)
b <- t(combn(x,3))
testnames <- colnames(test)
right <- matrix(1:15,nrow = 1,ncol = 15)
wt <- c((.8/3),(.8/3),(.8/3), 0.2)
# colnames(test)[1] <- 'Prices'
View(ck)
unique(test$NO.brand)
length(unique(datatest4$Brand))
