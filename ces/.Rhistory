#
#     right <- rbind(right,c(testnames[b[i,1]],testnames[b[i,2]],testnames[b[i,3]],coeff[2,1],coeff[3,1],coeff[2,4],coeff[3,4],diag[1,4],
#                            diag[2,4],diag[3,4],diag[4,4],lh_m_iv_endo1$F[2], lh_m_iv_endo2$F[2], score))
#     cat(c(testnames[b[i,1]],testnames[b[i,2]],testnames[b[i,3]],coeff[2,1],coeff[3,1],coeff[2,4],coeff[3,4],diag[1,4],
#           diag[2,4],diag[3,4],diag[4,4],lh_m_iv_endo1$F[2], lh_m_iv_endo2$F[2], score))
#     #stargazer(m_iv,omit =name,type = 'text')
#
#   }
# }
# #5,7,9,12,13,14,16,18
# Sum_dataframe <- as.data.frame(right)
# colnames(Sum_dataframe) <- c('iv1','iv2','iv3','quality_coef','price_coef','quality_coef_Pvalue','price_coef_Pvalue',
#                              'WeakIV_1','WeakIV_2','WuHausman','Sargan','iv_endo1_Ftest','iv_endo1_Ftes2','score')
# Sum_dataframe <- Sum_dataframe[-1,]
# # 4 ivs -------------------------------------------------------------------
#
#
# x <-  7:12
# b <- t(combn(x,4))
# testnames <- colnames(test)
# right <- matrix(1:15,nrow = 1,ncol = 15)
# wt <- c((.8/3),(.8/3),(.8/3), 0.2)
#
# #1best 3,2best 2.2,
#
# for (i in seq(1,length(b[,1]),1)) {
#   skip_to_next <- FALSE
#   #IV regression
#   formula <- as.formula(sprintf('lgs.s0 ~.-%s -%s -%s -%s| .-%s -%s',testnames[b[i,1]],testnames[b[i,2]],testnames[b[i,3]],testnames[b[i,4]],'Prices','Averate'))
#   tryCatch({
#     m_iv <- ivreg(formula, data = test[,c(1:7,b[i,1],b[i,2],b[i,3],b[i,4],13:500)])
#     summ_m_iv <- summary(m_iv,diagnostics = TRUE)
#   },
#   error=function(e) {
#     # message(paste("URL does not seem to exist:", url))
#     message("Here's the original error message:")
#     message(e)
#     skip_to_next <<- TRUE
#   })
#   print(i)
#   if(skip_to_next) { next }
#
#
#
#   #scores
#   WeakIV_1 <- ifelse(summ_m_iv$diagnostics[1, "p-value"] < 0.01, 3,
#                      ifelse(0.01< summ_m_iv$diagnostics[1, "p-value"] & summ_m_iv$diagnostics[1, "p-value"] < 0.05, 2,
#                             ifelse(0.05 < summ_m_iv$diagnostics[1, "p-value"] & summ_m_iv$diagnostics[1, "p-value"] < 0.1, 1, 0)))
#   WeakIV_2 <- ifelse(summ_m_iv$diagnostics[2, "p-value"] < 0.01, 3,
#                      ifelse(0.01< summ_m_iv$diagnostics[2, "p-value"] & summ_m_iv$diagnostics[2, "p-value"] < 0.05, 2,
#                             ifelse(0.05 < summ_m_iv$diagnostics[2, "p-value"] & summ_m_iv$diagnostics[2, "p-value"] < 0.1, 1, 0)))
#
#   WuHausman <- ifelse(summ_m_iv$diagnostics[3, "p-value"] < 0.01, 3,
#                       ifelse(0.01< summ_m_iv$diagnostics[3, "p-value"] & summ_m_iv$diagnostics[3, "p-value"] < 0.05, 2,
#                              ifelse(0.05 < summ_m_iv$diagnostics[3, "p-value"] & summ_m_iv$diagnostics[3, "p-value"] < 0.1, 1, 0)))
#
#   Sargan <- ifelse(summ_m_iv$diagnostics[4, "p-value"] < 0.01, 3,
#                    ifelse(0.01< summ_m_iv$diagnostics[4, "p-value"] & summ_m_iv$diagnostics[4, "p-value"] < 0.05, 2,
#                           ifelse(0.05 < summ_m_iv$diagnostics[4, "p-value"] & summ_m_iv$diagnostics[4, "p-value"] < 0.1, 1, 0)))
#
#
#   score  <- sum(wt[1]*WeakIV_1,
#                 wt[2]*WeakIV_2,
#                 wt[3]*WuHausman,
#                 wt[4]*Sargan)
#
#
#   #First Stage regression
#   formula_lh_endo_1 <- as.formula(sprintf('Prices ~.+%s +%s +%s +%s -%s -%s',testnames[b[i,1]],testnames[b[i,2]],testnames[b[i,3]],testnames[b[i,4]],'lgs.s0','Averate'))
#   formula_lh_endo_2 <- as.formula(sprintf('Averate ~.+%s +%s +%s +%s -%s -%s',testnames[b[i,1]],testnames[b[i,2]],testnames[b[i,3]],testnames[b[i,4]],'Prices','lgs.s0'))
#   fs_m_iv_endo1 <- lm(formula_lh_endo_1, data = test[,c(1:7,b[i,1],b[i,2],b[i,3],b[i,4],13:500)])
#   fs_m_iv_endo2 <- lm(formula_lh_endo_2, data = test[,c(1:7,b[i,1],b[i,2],b[i,3],b[i,4],13:500)])
#
#   lh_vec1 <- colnames(test[,c(b[i,1],b[i,2],b[i,3],b[i,4])])
#   lh_vec2 <- paste(lh_vec1, "= 0", sep = " ")
#   #later need to test the linearity in the test,, the linearHypothesis used to test where iv joint test is significat, the F score should be higher than 10
#   lh_m_iv_endo1 <- linearHypothesis(fs_m_iv_endo1, c(lh_vec2[1], lh_vec2[2], lh_vec2[3],lh_vec2[4]), test="F", type=HC1, singular.ok = T)
#   lh_m_iv_endo2 <- linearHypothesis(fs_m_iv_endo2, c(lh_vec2[1], lh_vec2[2], lh_vec2[3],lh_vec2[4]), test="F", type=HC1, singular.ok = T)
#
#
#   if (m_iv$coefficients[3]<0 & m_iv$coefficients[2]>0 ){
#     coeff <- summ_m_iv$coefficients
#     diag <- summ_m_iv$diagnostics
#     # Here I filter the result accoring to iv test and coefficient significant test
#
#     right <- rbind(right,c(testnames[b[i,1]],testnames[b[i,2]],testnames[b[i,3]],testnames[b[i,4]],coeff[2,1],coeff[3,1],coeff[2,4],coeff[3,4],diag[1,4],
#                            diag[2,4],diag[3,4],diag[4,4],lh_m_iv_endo1$F[2], lh_m_iv_endo2$F[2], score))
#     cat(c(testnames[b[i,1]],testnames[b[i,2]],testnames[b[i,3]],testnames[b[i,4]],coeff[2,1],coeff[3,1],coeff[2,4],coeff[3,4],diag[1,4],
#           diag[2,4],diag[3,4],diag[4,4],lh_m_iv_endo1$F[2], lh_m_iv_endo2$F[2], score))
#     #stargazer(m_iv,omit =name,type = 'text')
#
#   }
# }
# Sum_dataframe_4iv <- as.data.frame(right)
# colnames(Sum_dataframe_4iv) <- c('iv1','iv2','iv3','iv4','quality_coef','price_coef','quality_coef_Pvalue','price_coef_Pvalue',
#                              'WeakIV_1','WeakIV_2','WuHausman','Sargan','iv_endo1_Ftest','iv_endo1_Ftes2','score')
# Sum_dataframe_4iv <- Sum_dataframe_4iv[-1,]
# write.csv(Sum_dataframe_4iv,'Sum_dataframe_4iv.csv')
# saveRDS(Sum_dataframe_4iv,'Sum_dataframe_4iv.Rds')
#
# # 5 ivs -------------------------------------------------------------------
#
#
# x <- 9:20
# b <- t(combn(x,5))
# testnames <- colnames(test)
# right <- matrix(1:16,nrow = 1,ncol = 16)
# wt <- c((.8/3),(.8/3),(.8/3), 0.2)
#
# #1best 3,2best 2.2,
#
# for (i in seq(1,length(b[,1]),1)) {
#   #IV regression
#   formula <- as.formula(sprintf('lgs.s0 ~.-%s -%s -%s -%s -%s| .-%s -%s',testnames[b[i,1]],testnames[b[i,2]],testnames[b[i,3]],testnames[b[i,4]],testnames[b[i,5]],'Prices','Averate'))
#   m_iv <- ivreg(formula, data = test[,c(1:8,b[i,1],b[i,2],b[i,3],b[i,4],b[i,5],21:184)])
#   summ_m_iv <- summary(m_iv,diagnostics = TRUE)
#   #scores
#   WeakIV_1 <- ifelse(summ_m_iv$diagnostics[1, "p-value"] < 0.01, 3,
#                      ifelse(0.01< summ_m_iv$diagnostics[1, "p-value"] & summ_m_iv$diagnostics[1, "p-value"] < 0.05, 2,
#                             ifelse(0.05 < summ_m_iv$diagnostics[1, "p-value"] & summ_m_iv$diagnostics[1, "p-value"] < 0.1, 1, 0)))
#   WeakIV_2 <- ifelse(summ_m_iv$diagnostics[2, "p-value"] < 0.01, 3,
#                      ifelse(0.01< summ_m_iv$diagnostics[2, "p-value"] & summ_m_iv$diagnostics[2, "p-value"] < 0.05, 2,
#                             ifelse(0.05 < summ_m_iv$diagnostics[2, "p-value"] & summ_m_iv$diagnostics[2, "p-value"] < 0.1, 1, 0)))
#
#   WuHausman <- ifelse(summ_m_iv$diagnostics[3, "p-value"] < 0.01, 3,
#                       ifelse(0.01< summ_m_iv$diagnostics[3, "p-value"] & summ_m_iv$diagnostics[3, "p-value"] < 0.05, 2,
#                              ifelse(0.05 < summ_m_iv$diagnostics[3, "p-value"] & summ_m_iv$diagnostics[3, "p-value"] < 0.1, 1, 0)))
#
#   Sargan <- ifelse(summ_m_iv$diagnostics[4, "p-value"] < 0.01, 3,
#                    ifelse(0.01< summ_m_iv$diagnostics[4, "p-value"] & summ_m_iv$diagnostics[4, "p-value"] < 0.05, 2,
#                           ifelse(0.05 < summ_m_iv$diagnostics[4, "p-value"] & summ_m_iv$diagnostics[4, "p-value"] < 0.1, 1, 0)))
#
#
#   score  <- sum(wt[1]*WeakIV_1,
#                 wt[2]*WeakIV_2,
#                 wt[3]*WuHausman,
#                 wt[4]*Sargan)
#
#
#   #First Stage regression
#   formula_lh_endo_1 <- as.formula(sprintf('Prices ~.+%s +%s +%s +%s +%s -%s -%s',testnames[b[i,1]],testnames[b[i,2]],testnames[b[i,3]],testnames[b[i,4]],testnames[b[i,5]],'lgs.s0','Averate'))
#   formula_lh_endo_2 <- as.formula(sprintf('Averate ~.+%s +%s +%s +%s +%s -%s -%s',testnames[b[i,1]],testnames[b[i,2]],testnames[b[i,3]],testnames[b[i,4]],testnames[b[i,5]],'Prices','lgs.s0'))
#   fs_m_iv_endo1 <- lm(formula_lh_endo_1, data = test[,c(1:8,b[i,1],b[i,2],b[i,3],b[i,4],b[i,5],21:184)])
#   fs_m_iv_endo2 <- lm(formula_lh_endo_2, data = test[,c(1:8,b[i,1],b[i,2],b[i,3],b[i,4],b[i,5],21:184)])
#
#   lh_vec1 <- colnames(test[,c(b[i,1],b[i,2],b[i,3],b[i,4],b[i,5])])
#   lh_vec2 <- paste(lh_vec1, "= 0", sep = " ")
#   #later need to test the linearity in the test,, the linearHypothesis used to test where iv joint test is significat, the F score should be higher than 10
#   lh_m_iv_endo1 <- linearHypothesis(fs_m_iv_endo1, c(lh_vec2[1], lh_vec2[2], lh_vec2[3],lh_vec2[4],lh_vec2[5]), test="F", type=HC1, singular.ok = T)
#   lh_m_iv_endo2 <- linearHypothesis(fs_m_iv_endo2, c(lh_vec2[1], lh_vec2[2], lh_vec2[3],lh_vec2[4],lh_vec2[5]), test="F", type=HC1, singular.ok = T)
#
#
#   if (m_iv$coefficients[4]<0 & m_iv$coefficients[5]>0 &
#       lh_m_iv_endo1$F[2] > 10 & lh_m_iv_endo2$F[2] > 10 ){
#     coeff <- summ_m_iv$coefficients
#     diag <- summ_m_iv$diagnostics
#     # Here I filter the result accoring to iv test and coefficient significant test
#
#     right <- rbind(right,c(testnames[b[i,1]],testnames[b[i,2]],testnames[b[i,3]],testnames[b[i,4]],testnames[b[i,5]],coeff[4,1],coeff[5,1],coeff[4,4],coeff[5,4],diag[1,4],
#                            diag[2,4],diag[3,4],diag[4,4],lh_m_iv_endo1$F[2], lh_m_iv_endo2$F[2], score))
#     cat(c(testnames[b[i,1]],testnames[b[i,2]],testnames[b[i,3]],testnames[b[i,4]],testnames[b[i,5]],coeff[4,1],coeff[5,1],coeff[4,4],coeff[5,4],diag[1,4],
#           diag[2,4],diag[3,4],diag[4,4],lh_m_iv_endo1$F[2], lh_m_iv_endo2$F[2], score))
#     #stargazer(m_iv,omit =name,type = 'text')
#
#   }
# }
# Sum_dataframe_5iv <- as.data.frame(right)
# colnames(Sum_dataframe_5iv) <- c('iv1','iv2','iv3','iv4','iv5','price_coef','quality_coef','price_coef_Pvalue','quality_coef_Pvalue',
#                                  'WeakIV_1','WeakIV_2','WuHausman','Sargan','iv_endo1_Ftest','iv_endo1_Ftes2','score')
#
# Sum_dataframe_5iv <- Sum_dataframe_5iv[-1,]
#
# saveRDS(Sum_dataframe_5iv,'Sum_dataframe_5iv.Rds')
# # Sum_dataframe_4iv <- Sum_dataframe_4iv[-1,]
# # saveRDS(Sum_dataframe_4iv,'Sum_dataframe_4iv.Rds')
# write.csv(Sum_dataframe_4iv,'Sum_dataframe_4iv.csv')
#
# merger simulation -------------------------------------------------------
i <- 8 #2,3,5,7,8,9,14,18
formula <- as.formula(sprintf('lgs.s0 ~.-%s -%s -%s | .-%s -%s',testnames[b[i,1]],testnames[b[i,2]],testnames[b[i,3]],'Prices','Averate'))
m_iv_put <- ivreg(formula, data = test[,c(1:5,b[i,1],b[i,2],b[i,3],12:292)])
summary(m_iv_put,diagnostics = TRUE)
# alpha <- -0.07065  # get from the two step gmm result. Coefficient of price
# tau <- 6.31321# Coefficient of quality g
alpha <- -0.117720   # get from the two step gmm result. Coefficient of price
tau <-  4.026091# Coefficient of quality g
# pickup one market data, then do the merge simulation
value <- m_iv_put$fitted.values- alpha * datatest4$Prices - tau * datatest4$Averate
datatest4$meanval <- value
#
# alpha <- 6.106  # From the above 2sls coefficent of price
# tau <- 2.528# Coefficient of quality
owner <- function(thisOwner){
owners <- as.numeric(factor(thisOwner, levels= unique(thisOwner)))
nprod <- length(thisOwner)
thisOwner <- matrix(0,ncol=nprod,nrow=nprod)
for( o in unique(owners)){
thisOwner [owners == o, owners == o] = 1
}
return(thisOwner)
}
elast_price <- function(shares,prices,alpha){
nprods <-  length(shares)
shares <- as.matrix(shares,nrow = nprods, ncol = 1)
elast <- -matrix(alpha*shares,ncol=nprods,nrow=nprods,byrow=TRUE)
diag(elast) <- alpha-1 + diag(elast)
return(elast)
}
elast_quality <- function(shares,quality,tau){
nprods <-  length(shares)
shares <- as.matrix(shares,nrow = nprods, ncol = 1)
elast <- -tau  * matrix(quality*shares,ncol=nprods,nrow=nprods,byrow=TRUE)
diag(elast) <- tau*quality + diag(elast)
return(elast)
}
calcShares <- function(prices,quality,meanval,alpha,tau){
shares <- exp(meanval + alpha*log(abs(prices))+tau*quality)
shares <- shares/(1 + sum(shares,na.rm=TRUE))
return(shares)
}
calcMc_price <- function(prices,quality,meanval,alpha,tau,owner,B){
# browser()
share_i <- calcShares(prices,quality,meanval,alpha,tau)
price_over_share_i <- matrix(1 / (share_i*B/prices)) %*% matrix(prices, nrow = 1)
elasticities_i <- elast_price(share_i,prices,alpha)
derivatives_i <- elasticities_i / price_over_share_i # partial derivatives of shares wrt price
own_prod_pre_i <- owner # if element (i,j) equals 1, that means that prod i and j are produced by same firm
markups <- c(solve(t(derivatives_i) * own_prod_pre_i) %*% (share_i*B/prices))
arg_cost <- prices + markups
isNegMC <- arg_cost < 0
if(any(isNegMC, na.rm = TRUE)){
# warning(paste("Negative marginal costs were calibrated for the following brands:", paste(prodNames[isNegMC], collapse=",")))
arg_cost[isNegMC] <- min(arg_cost[!isNegMC])
}
return(arg_cost)
}
calcMC_quality <- function(prices,quality,meanval,alpha,tau,owner,B){
mc_price <- calcMc_price(prices,quality,meanval,alpha,tau,owner,B)
share_i <- calcShares(prices,quality,meanval,alpha,tau)
quality_pre_i <- quality
quality_over_share_i <- matrix(1 / (share_i*B/prices)) %*% matrix(quality_pre_i, nrow = 1)
elasticities_i <- elast_quality(share_i,quality_pre_i,tau)
derivatives_i <- elasticities_i / quality_over_share_i # partial derivatives of shares wrt quality
own_prod_pre_i <- owner # if element (i,j) equals 1, that means that prod i and j are produced by same firm
mc_quality <- (t(derivatives_i) * own_prod_pre_i) %*% (prices-mc_price)
isNegMC <- mc_quality < 0
mc_quality[isNegMC] <- min(mc_quality[!isNegMC])
# mc_quality <- log(mc_quality)
if(any(isNegMC, na.rm = TRUE)){
mc_quality[isNegMC] <- min(mc_quality[!isNegMC])
# warning(paste("Negative marginal costs were calibrated for the following brands:", paste(prodNames[isNegMC], collapse=",")))
}
return(mc_quality)
}
calcShares.p <- function(prices,quality,meanval,alpha,tau){
shares <- exp(meanval + alpha*log(prices)+tau*quality)
shares <- shares/(1 + sum(shares,na.rm=TRUE))
return(shares)
}
calcMc_price.p <- function(prices,meanval,quality,alpha,tau,owner,B){
share_i <- calcShares.p(prices,quality,meanval,alpha,tau)
price_over_share_i <- matrix(1 / (share_i*B/prices)) %*% matrix(prices, nrow = 1)
elasticities_i <- elast_price(share_i,prices,alpha)
derivatives_i <- elasticities_i / price_over_share_i # partial derivatives of shares wrt price
own_prod_pre_i <- owner # if element (i,j) equals 1, that means that prod i and j are produced by same firm
markups <- c(solve(t(derivatives_i) * own_prod_pre_i) %*% (share_i*B/prices))
arg_cost <- prices + markups
isNegMC <- arg_cost < 0
arg_cost[isNegMC] <- min(arg_cost[!isNegMC])
# arg_cost <- log(arg_cost)
# if(any(isNegMC, na.rm = TRUE)){
#
#   warning(paste("Negative marginal costs were calibrated for the following brands:", paste(prodNames[isNegMC], collapse=",")))
# }
return(arg_cost)
}
# alpha <- 6.106  # From the above 2sls coefficent of price
datatest5 <- datatest4
meanval <- datatest5$meanval
quality_pre <- datatest5$Averate # The average of ratings are expressed as the product quality
price_pre <- exp(datatest5$Prices)
brand_pre <- datatest5$Firm
ownerpre <- owner(brand_pre)
datatest5$Firm[which(datatest5$Firm=='eufy')] = 'iRobot'
brand_post <- datatest5$Firm
ownerpost <- owner(brand_post)
B <- datatest4$Fra_income
mc.qua <- calcMC_quality(price_pre,quality_pre,meanval,alpha,tau,ownerpre,B)
datatest5$mc_quality_pre <- mc.qua
linear.2 <- feols(mc_quality_pre ~ Averate | Brand+market_ids, datatest5)
coef_quality <- linear.2$coeftable[1,1]
etable(linear.2)
# tau <- 2.509# Coefficient of quality
# pickup one market data, then do the merge simulation
wb1 <- createWorkbook(creator = 'junjunz',title = 'ces_d')
# wb2 <- createWorkbook(creator = 'junjunz',title = 'ces_s')
market_list <- c('R20Q1','R20Q2','R20Q3','R20Q4','R21Q1','R21Q2','R21Q3','R21Q4','R22Q1')
for (i in market_list) {
market_ids <- i
data.R22Q1 <- datatest4[datatest4$market_ids==market_ids,]
data.R22Q1$Prices <- exp(data.R22Q1$Prices)
B <- data.R22Q1$Fra_income
Unobpart <- datatest5$mc_quality_pre[datatest4$market_ids==market_ids]-linear.2$fitted.values[datatest4$market_ids==market_ids] # get the unobserved part that will affect the marginal cost of quality
data.R22Q1$Unobpart <- Unobpart[datatest4$market_ids==market_ids]
meanval <- data.R22Q1$meanval
quality_pre <- data.R22Q1$Averate # The average of ratings are expressed as the product quality
price_pre <-data.R22Q1$Prices
brand_pre <- data.R22Q1$Firm
ownerpre <- owner(brand_pre)
data.R22Q1$Firm[which(data.R22Q1$Firm=='eufy')] = 'iRobot'
brand_post <- data.R22Q1$Firm
ownerpost <- owner(brand_post)
# elasticities_pre_mkt <- elast_price()
FOC <- function(innitial_vetor){
len <- length(innitial_vetor)
prices <- innitial_vetor[1:(len/2)]
quality <- innitial_vetor[(len/2+1):len]
implied_shares <- calcShares(prices,quality,meanval,alpha,tau)
price_over_shares <- matrix(1 / (implied_shares*B/prices)) %*% matrix(prices, nrow = 1)
elasticities_pre_price <- elast_price(implied_shares,prices,alpha)
derivatives_price <- elasticities_pre_price / price_over_shares
# markups_post <- c(-solve(t(derivatives_price) * ownerpre) %*% implied_shares)
marg_cost <- calcMc_price(price_pre,quality_pre,meanval,alpha,tau,ownerpre,B)
quality_over_shares <- matrix(1 / (implied_shares*B/prices)) %*% matrix(quality, nrow = 1)
elasticities_pre_quality <- elast_quality(implied_shares,quality,tau)
derivatives_quality <- elasticities_pre_quality / quality_over_shares
# markups_post <- c(-solve(t(derivatives_quality) * ownerpre) %*% implied_shares)
vec1 <- as.matrix(coef_quality*quality+Unobpart)
M1_PRICE <- t(derivatives_price) * ownerpre
M2_QUALITY <- t(derivatives_quality) * ownerpre
Merge_matrix <- rbind(cbind(M1_PRICE,matrix(0,nrow=nrow(M1_PRICE),ncol=ncol(M2_QUALITY))),cbind(matrix(0,nrow=nrow(M2_QUALITY),ncol=ncol(M1_PRICE)),M2_QUALITY))
price_mc <- prices - marg_cost
matrix_price_mc <- append(price_mc,price_mc)
matrix_price_mc <- matrix(matrix_price_mc,ncol = 1)
quantity <- implied_shares*B/prices
matrix_shares_mC <- append(quantity,-vec1)
matrix_shares_mC <- matrix(matrix_shares_mC,ncol = 1)
thisFOC <- as.vector(matrix_shares_mC + Merge_matrix %*% matrix_price_mc)
return(thisFOC)
}
FOC_optim <- function(innitial_vetor){
len <- length(innitial_vetor)
prices <- innitial_vetor[1:(len/2)]
quality <- innitial_vetor[(len/2+1):len]
implied_shares <- calcShares(prices,quality,meanval,alpha,tau)
price_over_shares <- matrix(1 / (implied_shares*B/prices)) %*% matrix(prices, nrow = 1)
elasticities_pre_price <- elast_price(implied_shares,prices,alpha)
derivatives_price <- elasticities_pre_price / price_over_shares
# markups_post <- c(-solve(t(derivatives_price) * ownerpre) %*% implied_shares)
marg_cost <- calcMc_price(price_pre,quality_pre,meanval,alpha,tau,ownerpre,B)
quality_over_shares <- matrix(1 / (implied_shares*B/prices)) %*% matrix(quality, nrow = 1)
elasticities_pre_quality <- elast_quality(implied_shares,quality,tau)
derivatives_quality <- elasticities_pre_quality / quality_over_shares
# markups_post <- c(-solve(t(derivatives_quality) * ownerpre) %*% implied_shares)
vec1 <- as.matrix(coef_quality*quality+Unobpart)
M1_PRICE <- t(derivatives_price) * ownerpre
M2_QUALITY <- t(derivatives_quality) * ownerpre
Merge_matrix <- rbind(cbind(M1_PRICE,matrix(0,nrow=nrow(M1_PRICE),ncol=ncol(M2_QUALITY))),cbind(matrix(0,nrow=nrow(M2_QUALITY),ncol=ncol(M1_PRICE)),M2_QUALITY))
price_mc <- prices - marg_cost
matrix_price_mc <- append(price_mc,price_mc)
matrix_price_mc <- matrix(matrix_price_mc,ncol = 1)
quantity <- implied_shares*B/prices
matrix_shares_mC <- append(quantity,-vec1)
matrix_shares_mC <- matrix(matrix_shares_mC,ncol = 1)
thisFOC <- as.vector(matrix_shares_mC + Merge_matrix %*% matrix_price_mc)
return(sum(thisFOC))
}
innitial_vector <- append(data.R22Q1$Prices,data.R22Q1$Averate)
len <- length(innitial_vector)
minResult.pre <- BBsolve(innitial_vector,FOC)
# lo <- c(rep(0,len/2),rep(0,len/2))
# hi <- c(rep(6000,len/2),rep(5,len/2))
# minResult.pre <- BBoptim(innitial_vector,FOC_optim,lower=lo, upper=hi)
if (minResult.pre$convergence != 0){
lo <- c(rep(0,len/2),rep(0,len/2))
hi <- c(rep(6000,len/2),rep(5,len/2))
minResult.pre <- BBoptim(innitial_vector,FOC_optim,lower=lo, upper=hi)
}
FOC_post <- function(innitial_vetor){
len <- length(innitial_vetor)
prices <- innitial_vetor[1:(len/2)]
quality <- innitial_vetor[(len/2+1):len]
implied_shares <- calcShares(prices,quality,meanval,alpha,tau)
price_over_shares <- matrix(1 / (implied_shares*B/prices)) %*% matrix(prices, nrow = 1)
elasticities_pre_price <- elast_price(implied_shares,prices,alpha)
derivatives_price <- elasticities_pre_price / price_over_shares
# markups_post <- c(-solve(t(derivatives_price) * ownerpre) %*% implied_shares)
marg_cost <- calcMc_price(price_pre,quality_pre,meanval,alpha,tau,ownerpre,B)
quality_over_shares <- matrix(1 / (implied_shares*B/prices)) %*% matrix(quality, nrow = 1)
elasticities_pre_quality <- elast_quality(implied_shares,quality,tau)
derivatives_quality <- elasticities_pre_quality / quality_over_shares
# markups_post <- c(-solve(t(derivatives_quality) * ownerpre) %*% implied_shares)
vec1 <- as.matrix(coef_quality*quality+Unobpart)
M1_PRICE <- t(derivatives_price) * ownerpost
M2_QUALITY <- t(derivatives_quality) * ownerpost
Merge_matrix <- rbind(cbind(M1_PRICE,matrix(0,nrow=nrow(M1_PRICE),ncol=ncol(M2_QUALITY))),cbind(matrix(0,nrow=nrow(M2_QUALITY),ncol=ncol(M1_PRICE)),M2_QUALITY))
price_mc <- prices - marg_cost
matrix_price_mc <- append(price_mc,price_mc)
matrix_price_mc <- matrix(matrix_price_mc,ncol = 1)
quantity <- implied_shares*B/prices
matrix_shares_mC <- append(quantity,-vec1)
matrix_shares_mC <- matrix(matrix_shares_mC,ncol = 1)
thisFOC <- as.vector(matrix_shares_mC + Merge_matrix %*% matrix_price_mc)
return(thisFOC)
}
FOC_post_optim <- function(innitial_vetor){
len <- length(innitial_vetor)
prices <- innitial_vetor[1:(len/2)]
quality <- innitial_vetor[(len/2+1):len]
implied_shares <- calcShares(prices,quality,meanval,alpha,tau)
price_over_shares <- matrix(1 / (implied_shares*B/prices)) %*% matrix(prices, nrow = 1)
elasticities_pre_price <- elast_price(implied_shares,prices,alpha)
derivatives_price <- elasticities_pre_price / price_over_shares
# markups_post <- c(-solve(t(derivatives_price) * ownerpre) %*% implied_shares)
marg_cost <- calcMc_price(price_pre,quality_pre,meanval,alpha,tau,ownerpre,B)
quality_over_shares <- matrix(1 / (implied_shares*B/prices)) %*% matrix(quality, nrow = 1)
elasticities_pre_quality <- elast_quality(implied_shares,quality,tau)
derivatives_quality <- elasticities_pre_quality / quality_over_shares
# markups_post <- c(-solve(t(derivatives_quality) * ownerpre) %*% implied_shares)
vec1 <- as.matrix(coef_quality*quality+Unobpart)
M1_PRICE <- t(derivatives_price) * ownerpost
M2_QUALITY <- t(derivatives_quality) * ownerpost
Merge_matrix <- rbind(cbind(M1_PRICE,matrix(0,nrow=nrow(M1_PRICE),ncol=ncol(M2_QUALITY))),cbind(matrix(0,nrow=nrow(M2_QUALITY),ncol=ncol(M1_PRICE)),M2_QUALITY))
price_mc <- prices - marg_cost
matrix_price_mc <- append(price_mc,price_mc)
matrix_price_mc <- matrix(matrix_price_mc,ncol = 1)
quantity <- implied_shares*B/prices
matrix_shares_mC <- append(quantity,-vec1)
matrix_shares_mC <- matrix(matrix_shares_mC,ncol = 1)
thisFOC <- as.vector(matrix_shares_mC + Merge_matrix %*% matrix_price_mc)
return(sum(thisFOC))
}
minResult.post <- BBsolve(innitial_vector,FOC_post)
# lo <- c(rep(0,len/2),rep(0,len/2))
# hi <- c(rep(6000,len/2),rep(5,len/2))
# minResult.post <- BBoptim(innitial_vector,FOC_post_optim,lower=lo, upper=hi)
#
if (minResult.post$convergence != 0){
lo <- c(rep(0,len/2),rep(0,len/2))
hi <- c(rep(6000,len/2),rep(5,len/2))
minResult.post <- BBoptim(innitial_vector,FOC_post_optim,lower=lo, upper=hi)
}
len <- length(innitial_vector)
EstpricePre.pg <- minResult.pre$par[1:(len/2)]
EstqualityPre.pg <- minResult.pre$par[(len/2+1):len]
# EstqualityPre.pg[which(EstqualityPre.pg<0,arr.ind = T)] <- 0.1
# EstqualityPre.pg[which(EstqualityPre.pg>5,arr.ind = T)] <- 5
EstsharesPre.pg <- calcShares(EstpricePre.pg,EstqualityPre.pg,meanval,alpha,tau)
EstpricePost.pg <- minResult.post$par[1:(len/2)]
EstqualityPost.pg <- minResult.post$par[(len/2+1):len]
# EstqualityPost.pg[which(EstqualityPost.pg<0,arr.ind = T)] <- 0.1
# EstqualityPost.pg[which(EstqualityPost.pg>5,arr.ind = T)] <- 5
EstsharesPost.pg <- calcShares(EstpricePost.pg,EstqualityPost.pg,meanval,alpha,tau)
#pROPOSITION1
#The l*m
prices <- minResult.post$par[1:(len/2)]
quality <- minResult.post$par[(len/2+1):len]
implied_shares <- calcShares(prices,quality,meanval,alpha,tau)
price_over_shares <- matrix(1 / (implied_shares*B/prices)) %*% matrix(prices, nrow = 1)
elasticities_pre_price <- elast_price(implied_shares,prices,alpha)
derivatives_price <- elasticities_pre_price / price_over_shares
quality_over_shares <- matrix(1 / (implied_shares*B/prices)) %*% matrix(quality, nrow = 1)
elasticities_pre_quality <- elast_quality(implied_shares,quality,tau)
derivatives_quality <- elasticities_pre_quality / quality_over_shares
p_diversion_ration <- -derivatives_price/diag(derivatives_price)
p_diversion_ration.same <- p_diversion_ration * ownerpost
price_ratio <- apply(p_diversion_ration.same,1,sum)
q_diversion_ration <- -derivatives_quality/diag(derivatives_quality)
q_diversion_ration.same <- q_diversion_ration * ownerpost
quality_ratio <- apply(q_diversion_ration.same,1,sum)
quality_price_lm <- -quality_ratio/price_ratio*implied_shares
#the h*m
prices <- minResult.pre$par[1:(len/2)]
quality <- minResult.pre$par[(len/2+1):len]
implied_shares <- calcShares(prices,quality,meanval,alpha,tau)
price_over_shares <- matrix(1 / (implied_shares*B/prices)) %*% matrix(prices, nrow = 1)
elasticities_pre_price <- elast_price(implied_shares,prices,alpha)
derivatives_price <- elasticities_pre_price / price_over_shares
quality_over_shares <- matrix(1 / (implied_shares*B/prices)) %*% matrix(quality, nrow = 1)
elasticities_pre_quality <- elast_quality(implied_shares,quality,tau)
derivatives_quality <- elasticities_pre_quality / quality_over_shares
quality_price_hm <- -diag(derivatives_quality)/diag(derivatives_price)*implied_shares
lm_hm <- quality_price_lm - quality_price_hm
g.m_g <- (EstqualityPost.pg- EstqualityPre.pg)/EstqualityPre.pg
Est_result.pg <- data.frame(brand_pre,brand_post,EstpricePre.pg,EstqualityPre.pg,EstsharesPre.pg,EstpricePost.pg,
EstqualityPost.pg,EstsharesPost.pg,quality_price_lm,quality_price_hm,g.m_g,lm_hm)
Est_result.pg$label <- ''
Est_result.pg$label[Est_result.pg$brand_post=='iRobot'] <- "*"
Est_result.pg$priceDif.pg <- (Est_result.pg$EstpricePost.pg-Est_result.pg$EstpricePre.pg)/Est_result.pg$EstpricePre.pg
Est_result.pg$qualityDif.pg <- (Est_result.pg$EstqualityPost.pg-Est_result.pg$EstqualityPre.pg)/Est_result.pg$EstqualityPre.pg
Est_result.pg$EstsharDif.pg <- (Est_result.pg$EstsharesPost.pg-Est_result.pg$EstsharesPre.pg)/Est_result.pg$EstsharesPre.pg
Est_result.pg <- Est_result.pg %>%
relocate(label,.after = brand_post)
Pro1 <- Est_result.pg
Pro1$market_ids <- market_ids
Pro1$Ob.price <- price_pre
Pro1$Ob.quality <- quality_pre
Pro1$Obprice_dif_pg <- price_pre-Pro1$EstpricePre.pg
# Pro1$Obprice_dif_p <- price_pre-Pro1$EstpricePre.p
Pro1$Obquality_dif_pg <- quality_pre-Pro1$EstqualityPre.pg
Pro1$Ob.shares <- data.R22Q1$shares
# Pro1$EST_ob_sharepg <- Pro1$EstsharesPre.p-shares_ori
Pro1 <- Pro1[order(Pro1$label,decreasing = T),]
# Pro1 <- Pro1[Pro1$label=='*',]
Pro1$converge_pre <- minResult.pre$convergence
Pro1$converge_post <-  minResult.post$convergence
stargazer(Pro1[Pro1$label=='*',],type = 'text')
addWorksheet(wb1,sheetName = market_ids)
writeData(wb1,sheet = market_ids,x = Pro1)
}
saveWorkbook(wb1, "ces_d.xlsx", overwrite = TRUE)
# saveWorkbook(wb2, "ces_s.xlsx", overwrite = TRUE)
